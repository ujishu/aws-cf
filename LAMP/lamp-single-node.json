{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template: Create an Amazon EC2 instance. This example creates an EC2 security group for the instance to give you SSH access.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "einsteinish",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters"
    },

    "DBUsername": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "Default" : "myusername",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters"
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "Default" : "mypassword",
      "ConstraintDescription" : "Must contain only alphanumeric characters"
    },

    "DBRootPassword": {
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "Default" : "mypassword",
      "ConstraintDescription" : "Must contain only alphanumeric characters"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
   }
  },

  "Mappings" : {
  },

  "Resources" : {
    "WebServerInstance" : {
      "Type" : "AWS::EC2::Instance",

      "Metadata" : {
          "Comment1" : "Configure the bootstrap helpers to install the Apache Web Server and PHP",
          "Comment2" : "Save website content to /var/www/html/index.php",

          "AWS::CloudFormation::Init" : {
              "configSets" : {
                  "Install" : [ "Install" ]
              },

              "Install" : {
                  "packages" : {
                      "yum" : {
                          "mysql"        : [],
                          "mysql-server" : [],
                          "mysql-libs"   : [],
                          "httpd"        : [],
                          "php"          : [],
                          "php-mysql"    : []
                      }
                  },

                  "files" : {
                      "/var/www/html/index.php" : {
                          "content" : { "Fn::Join" : [ "", [

                              "<html>\n",
                              "  <head>\n",
                              "    <title>AWS CloudFormation PHP Sample</title>\n",
                              "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                              "  </head>\n",
                              "  <body>\n",
                              "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      // Print out the current data and time\n",
                              "      print \"The Current Date and Time is: <br/>\";\n",
                              "      print date(\"g:i A l, F j Y.\");\n",
                              "    ?>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      // Setup a handle for CURL\n",
                              "      $curl_handle=curl_init();\n",
                              "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                              "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                              "      // Get the hostname of the intance from the instance metadata\n",
                              "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                              "      $hostname = curl_exec($curl_handle);\n",
                              "      if (empty($hostname))\n",
                              "      {\n",
                              "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                              "      }\n",
                              "      else\n",
                              "      {\n",
                              "        print \"Server = \" . $hostname . \"<br />\";\n",
                              "      }\n",
                              "      // Get the instance-id of the intance from the instance metadata\n",
                              "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                              "      $instanceid = curl_exec($curl_handle);\n",
                              "      if (empty($instanceid))\n",
                              "      {\n",
                              "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                              "      }\n",
                              "      else\n",
                              "      {\n",
                              "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                              "      }\n",
                              "      $Database   = \"", {"Ref" : "DBName"}, "\";\n",
                              "      $DBUser     = \"", {"Ref" : "DBUsername"}, "\";\n",
                              "      $DBPassword = \"", {"Ref" : "DBPassword"}, "\";\n",
                              "      print \"Database = \" . $Database . \"<br />\";\n",
                              "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                              "                      or die(\"Could not connect: \" . ysql_error());\n",
                              "      print (\"Connected to $Database successfully\");\n",
                              "      mysql_close($dbconnection);\n",
                              "    ?>\n",
                              "    <h2>PHP Information</h2>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      phpinfo();\n",
                              "    ?>\n",
                              "  </body>\n",
                              "</html>\n"

                          ]]},
                          "mode"  : "000600",
                          "owner" : "apache",
                          "group" : "apache"
                      }
                  },


                  "services" : {
                      "sysvinit" : {  
                          "httpd"   : { "enabled" : "true", "ensureRunning" : "true" }
                      }
                  }
              }
          }
      },

      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "WebServerSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-c58c1dd3",

        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum install -y aws-cfn-bootstrap\n",
          "# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerInstance ",
          "         --configsets Install ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"  
        ]]}}

      }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH & HTTP",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "WebServerInstance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "WebServerInstance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "WebServerInstance", "PublicIp" ] }
    },
    "WebsiteURL" : {
      "Description" : "URL for newly created LAMP stack",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ]}]] }
    }
  }
}
